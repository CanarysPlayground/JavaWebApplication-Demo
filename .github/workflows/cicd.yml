name: Build a war file for my Java Webapp
on:
  push:
    branches: ["main"]
jobs:
  build:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: setup JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
    - name: Build with Maven
      run: mvn clean install -f pom.xml

    - name: List files in target directory
      run: ls -l target/ 
   
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

    - name: Upload Maven artifact
      uses: actions/upload-artifact@v4
      with:
          name: web_application
          path: MyWebApp.war

    - name: Login to Azure
      uses: azure/login@v1
      with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            auth-type: 'SERVICE_PRINCIPAL'

    - name: Get the latest WAR file
      id: latest_war
      run: |
          # Find the most recent JAR file in the target directory
          LATEST_WAR=$(ls -t target/*.war | head -n 1)
          echo "LATEST_WAR=$LATEST_WAR" >> $GITHUB_ENV
          # Print out the location to ensure it's found
          echo "WAR file path: $LATEST_WAR"

    - name: Upload the .war file to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
          app-name: Test04
          package: ${{ env.LATEST_WAR }}
   
  Docker-build-push-ACR:
    runs-on: self-hosted
    needs: build  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Maven
        run: mvn clean install -f pom.xml

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          registry: javaapplication.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}  
          password: ${{ secrets.ACR_PASSWORD }}  
 

      - name: Build Docker image
        run: |
          sudo docker build -t javaapplication.azurecr.io/java-app:${{ github.sha }} .
      
      - name: Push Docker image
        run: |
          sudo docker push javaapplication.azurecr.io/java-app:${{ github.sha }}

  SonarCloud-Scan:
    runs-on: self-hosted
    needs: build  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: setup JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Print Java version
        run: java -version

      - name: Build with Maven - Sonar
        run: |
            mvn -B verify sonar:sonar \
              -Dsonar.projectKey=javaapplication-test_javatestapplication \
              -Dsonar.organization=javaapplication-test \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
              -Dsonar.branch.name=master
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
  
  Jfrog-docker-upload:
     runs-on: self-hosted
     needs:   Docker-build-push-ACR 
     steps:
      - name: Checkout code
        uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to JFrog Artifactory Docker registry
        run: |
          echo ${{ secrets.JFROG_API_KEY }} | docker login ${{secrets.JFROGREGISTRY}} -u ${{ secrets.JFROG_USERNAME }} --password-stdin
      - name: Build with Maven
        run: mvn clean install -f pom.xml
  
      - name: Build Docker image
        run: |
          sudo docker build -t ${{secrets.JFROGREGISTRY}}/jfrogjava-docker-local/java-app:${{ github.sha }} .

      - name: Push Docker image to JFrog Artifactory
        run: |
          docker push trialkqod4y.jfrog.io/jfrogjava-docker-local/java-app:${{ github.sha }}

  Trivy-Scan:
    runs-on: self-hosted
    needs:   Docker-build-push-ACR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Scan Docker image with Trivy
        run: |
          docker pull javaapplication.azurecr.io/java-app:${{ github.sha }}
          trivy image --severity HIGH,CRITICAL javaapplication.azurecr.io/java-app:${{ github.sha }}
    
  OWASP-Zap-Scan:
      runs-on: self-hosted
      needs:   Docker-build-push-ACR
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: ZAP Scan
          uses: zaproxy/action-baseline@v0.11.0
          with:
            target: 'https://test04-c4aheadtbucuagav.northeurope-01.azurewebsites.net/MyWebApp/'  
            #rules_file_name: '.zap/rules.tsv'
            allow_issue_writing: true
            fail_action: false  # Set to true if you want the workflow to fail on finding vulnerabilities
            cmd_options: '-timeout 1200 -v'  # Increase timeout and add verbosity
  
        - name: Upload ZAP Report
          uses: actions/upload-artifact@v4
          if: always()
          with:
            name: zap-scan-report
            path: |
              zap-baseline-report.html
              zap-baseline-report.md
